/**
 * An angular module that handle $http request error.
 * @version v0.0.1 - 2014-07-24
 * @link https://github.com/martinmicunda/mm-angular-error-http-handler
 * @author Martin Micunda
 * @copyright 2014(c) Martin Micunda
 * @license MIT, https://github.com/martinmicunda/mm-angular-error-http-handler/blob/master/LICENSE
 */
!function(){"use strict";function r(){var r={appErrorPrefix:"",ravenDns:null,ravenConfig:null,customDns:null};this.setConfigAppErrorPrefix=function(e){r.appErrorPrefix=e||r.appErrorPrefix},this.setConfigRavenDns=function(e){if(!e)throw new Error("RavenDNS must be set!");r.ravenDns=e},this.setConfigRavenConfig=function(e){r.ravenConfig=e||r.ravenConfig},this.setConfigCustomDns=function(e){if(!e)throw new Error("CustomeDNS must be set!");r.customDns=e},this.$get=["$injector","$q","$location","$window","Logger",function(e,n,t,o,a){var s=a.getLogger("$exceptionHandler"),i={navigatorAppName:navigator.appName,navigatorUserAgent:navigator.userAgent};if(o.Raven){s.info("Using the RavenJS server-side logging exception handler."),s.info("RavenJS ravenDns {0}",[r.ravenDns]),s.info("RavenJS ravenConfig {0}",[r.ravenConfig]);try{Raven.config(r.ravenDns,r.ravenConfig).install()}catch(u){s.error("Error to configure RavenJS"),s.error(u.toString())}}else r.customDns&&(s.info("Using the custom server-side logging exception handler."),s.info("Custom DNS {0}",[r.customDns]));return{responseError:function(a){try{if(o.Raven)Raven.captureException(new Error("HTTP response error"),{extra:{method:a.config.method,url:a.config.url,message:a.data,status:a.status,browserInfo:i}});else if(r.customDns){var u=e.get("$httpBackend");u("POST",r.customDns,angular.toJson({method:a.config.method,url:a.config.url,message:a.data,status:a.status,browserInfo:i}),angular.noop,{"content-type":"application/json"})}}catch(g){s.error("Error server-side logging failed"),s.error(g.toString())}switch(a.status){case 404:t.path("/404"),s.error("{0} {1} '{2}'",[a.status,a.statusText,a.config.url]);break;case 0:t.path("/500"),s.error("{0} {1} {2} '{3}'",[a.status,a.statusText,a.config.url,"Unable to communicate with the server. Make sure you are connected to the internet and try again."]);break;default:t.path("/500"),s.error("{0} {1} {2} '{3}'",[a.status,a.statusText,a.config.url,a.data.message])}return n.reject(a)}}}]}angular.module("mm.errorHttpHandler",["mm.logger"]).provider("errorHttpHandler",r).config(["$httpProvider",function(r){r.interceptors.push("errorHttpHandler")}])}();
//# sourceMappingURL=data:application/json;base64,